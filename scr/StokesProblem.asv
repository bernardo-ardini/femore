classdef StokesProblem < handle
    properties
        V
        Q
        mu
        c
    end

    methods
        function sp=StokesProblem(V,Q)
            assert(V.fe=="P12b");
            assert(Q.fe=="P1");
            assert(V.geo==Q.geo);
            sp.V=V;
            sp.Q=Q;
        end

        function [localA,localB]=assembleLocal(sp,e)
            geo=sp.V.geo;

            referenceassembly;

            Finv=geo.inverseJacobian{e};
            area=geo.areas(e);

            localA=2*area*(sp.mu*tensorprod(D,Finv*Finv',[3,4],[1,2])+sp.c*E);
            localB=-2*area*(tensorprod(C,Finv',3,2));

            localA=localA(:);
            localB=localB(:);
        end

        function [A,B]=assemble(sp)
            geo=sp.V.geo;

            IA=zeros(4*4,geo.numtriangles);
            JA=zeros(4*4,geo.numtriangles);
            valsA=zeros(4*4,geo.numtriangles);

            IB=zeros(4*2*3,geo.numtriangles);
            JB=zeros(4*2*3,geo.numtriangles);
            valsB=zeros(4*2*3,geo.numtriangles);

            for e=1:geo.numtriangles
                [valsA(:,e),valsB(:,e)]=sp.assembleLocal(e);
                [X,Y]=meshgrid([geo.triangles(e,1);geo.triangles(e,2);geo.triangles(e,3);geo.numvertices+e],[geo.triangles(e,1);geo.triangles(e,2);geo.triangles(e,3);geo.numvertices+e]);
                IA(:,e)=Y(:);
                JA(:,e)=X(:);
                [X,Y]=meshgrid(repmat(geo.triangles(e,1),3,1);repmat(geo.triangles(e,2),3,1);repmat(geo.triangles(e,3),3,1);repmat(geo.numvertices+e,3,1);...
           shift+geo.triangles(e,1);shift+geo.triangles(e,2);shift+geo.triangles(e,3);shift+geo.numvertices+e,[geo.triangles(e,1);geo.triangles(e,2);geo.triangles(e,3);geo.numvertices+e],[geo.triangles(e,1);geo.triangles(e,2);geo.triangles(e,3)]);
                IB(:,e)=repmat([geo.triangles(e,1);geo.triangles(e,2);geo.triangles(e,3)],8,1);
                shift=geo.numvertices+geo.numtriangles;
                JB(:,e)=[repmat(geo.triangles(e,1),3,1);repmat(geo.triangles(e,2),3,1);repmat(geo.triangles(e,3),3,1);repmat(geo.numvertices+e,3,1);...
                    repmat(shift+geo.triangles(e,1),3,1);repmat(shift+geo.triangles(e,2),3,1);repmat(shift+geo.triangles(e,3),3,1);repmat(shift+geo.numvertices+e,3,1)];
            end

            valsA=valsA(:);
            IA=IA(:);
            JA=JA(:);

            valsB=valsB(:);
            IB=IB(:);
            JB=JB(:);
            
            A=sparse(IA,JA,valsA);
            A=blkdiag(A,A);
            B=sparse(IB,JB,valsB);
        end

        function [u,p]=solve(sp,g)
            [A,B]=sp.assemble();

            B(sp.Q.constrainedVertices,:)=[];

            G=zeros(sp.V.numberConstrainedDof(),1);
            cc=1;
            for i=1:2
                for a=sp.V.constrainedVertices'
                    x=sp.V.geo.vertices(a,:)';
                    v=g(x);
                    G(cc)=v(i);
                    cc=cc+1;
                end
            end

            G=sp.V.fromConstrainedDof(G);

            l=-A*G;
            l=sp.V.toFreeDof(l);

            m=-B*G;

            A=sp.V.toFreeDof(A);
            B(:,sp.V.vertex2index(sp.V.constrainedVertices))=[];

            L=ichol(A);

            b=B*pcg(A,l,1e-7,1e4,L,L')-m;

            function v=R(x)
                v=B*pcg(A,B'*x,1e-7,1e4,L,L');
            end

            P=pcg(@R,b,1e-5,1e4,B*B');

            bb=l-B'*P;
            U=pcg(A,bb,1e-5,1e4,L,L');

            p=Function(sp.Q);
            p.fromFreeDof(P);

            u=Function(sp.V);
            u.fromFreeDof(U);
            u.dof=u.dof+G;
        end
    end
end